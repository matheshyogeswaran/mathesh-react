{
    "version": "https://jsonfeed.org/version/1",
    "title": "Stories by Matheshyogeswaran on Medium",
    "home_page_url": "https://medium.com/@matheshyogeswaran?source=rss-505ef1b70e94------2",
    "description": "Stories by Matheshyogeswaran on Medium",
    "author": {
        "name": "yourfriends@medium.com"
    },
    "items": [
        {
            "guid": "https://medium.com/p/0309ebe51ee9",
            "url": "https://medium.com/@matheshyogeswaran/understanding-udp-protocol-when-and-how-to-use-it-0309ebe51ee9?source=rss-505ef1b70e94------2",
            "title": "Understanding UDP Protocol: When and How to Use It",
            "content_html": "<p>Exploring the Basics of UDP, Its Applications, and a Hands-On UDP Server Example</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Lhv4zcZSKvxCZ7SySg2flA.png\" /><figcaption>Artwork by <a href=\"https://medium.com/@matheshyogeswaran\">Author</a></figcaption></figure><p>UDP (user datagram protocol) is one of the main protocol in the OSI model. It will be used under the transport layer. Here there are mainly two protocols: one is TCP, and the other is UDP. Here we focus on the UDP protocol.</p><blockquote>Why use UDP instead of TCP?</blockquote><ul><li>The UDP header is much smaller compared to the TCP header.</li><li>This smaller header is included with every UDP segment, which keeps the overall data size lower.</li><li>UDP’s main advantage over TCP is its smaller header, resulting in lower transmission and processing costs.</li></ul><blockquote>Why opt for UDP?</blockquote><p>Some applications require a form of communication where individual packets of data are sent without any assurance of their delivery or the order in which they arrive, making it an unreliable and non-point-to-point channel.<br>Examples:-</p><ul><li>Online Gaming: In multiplayer games, speed is crucial, and a few lost data packets are tolerable to avoid disrupting the gaming experience.</li><li>Streaming Services: Live streaming values speed over perfect data delivery; minor data loss like skipped frames is acceptable.</li></ul><blockquote>UDP flow diagram</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/629/1*8xiem7DhjJlSHpXE0pT5Qg.png\" /><figcaption>UDP flow diagram</figcaption></figure><ol><li>Server Gets Ready with a Socket (Bind): Think of the server as someone who’s expecting letters. They choose a mailbox (a specific place) to collect these letters.</li><li>Server Listens (Recvfrom): The server stands by the mailbox, waiting for letters to arrive. When a letter comes, they open it and see who it’s from.</li><li>Client Sends a Message (Sendto): The client is like someone who wants to send a letter to the server. They write the message, put it in an envelope, write the server’s address on it, and send it to the server’s mailbox.</li><li>Client and Server Finish (Close): When they’re done sending messages, they might clean up and say goodbye. It’s like ending a conversation.</li></ol><p>Now, let’s observe how a UDP server handles packet reception.</p><pre>import java.io.IOException;<br>import java.net.DatagramPacket;<br>import java.net.DatagramSocket;<br>import java.net.InetAddress;<br>import java.net.SocketException;<br><br>public class UDPServer {<br>    public final static int SERVICE_PORT = 50002; // Use a different port number<br>    // Fixed the assignment operator<br><br>    public static void main(String[] args) {<br>        try {<br>            // 1. Create a DatagramSocket object<br>            DatagramSocket serverSocket = new DatagramSocket(SERVICE_PORT);<br>            System.out.println(&quot;created a datafram socket&quot;+serverSocket.toString());<br>            // 2. Create Buffers for storing data in DatagramPacket object<br>            byte[] buffReceiveData = new byte[1024]; // Fixed variable assignment<br>            byte[] buffSendData = new byte[1024];<br><br>            // 3. Create DatagramPacket object for wrapping the incoming packet<br>            DatagramPacket packetIn = new DatagramPacket(buffReceiveData, buffReceiveData.length);<br>            System.out.println(&quot;create a datagram packet &quot;+ packetIn.toString());<br>            // 4. Receive incoming datagram into DatagramPacket object.<br>            try {<br>                // This is a blocking system call.<br>                serverSocket.receive(packetIn); // Program blocks here<br>                System.out.println(&quot;received packet&quot;);<br>            } catch (IOException e) {<br>                e.printStackTrace();<br>            }<br><br>            // 5. Get the data from the received packet<br>            String strInData = new String(packetIn.getData());<br>            System.out.println(&quot;RECEIVED DATA: &quot; + strInData);<br><br>            // 6. Find sender&#39;s address and port from the received packet<br>            InetAddress inAddress = packetIn.getAddress();<br>            int inPort = packetIn.getPort();<br><br>            // 7. Create datagram to send<br>            buffSendData = strInData.toUpperCase().getBytes(); // Fixed variable assignment<br>            DatagramPacket packetOut = new DatagramPacket(buffSendData, buffSendData.length, inAddress, inPort);<br>            System.out.println(&quot;datagram packet about to sent&quot;+packetOut.toString());<br>            // 8. Send the response datagram<br>            try {<br>                serverSocket.send(packetOut);<br>                System.out.println(&quot;sent the packet out &quot;+ packetOut.toString());<br>            } catch (IOException e) {<br>                e.printStackTrace();<br>            }<br><br>            // 9. Close the DatagramSocket<br>            serverSocket.close();<br>            System.out.println(&quot;socket is clossed now&quot;);<br>        } catch (SocketException e) {<br>            e.printStackTrace();<br>        }<br>    }<br>}</pre><p>After running this code, open Packet Sender and enter the following data: ASCII message ‘Hello,’ destination address 127.0.0.1 (localhost), destination port 50002, select the UDP protocol, and then click ‘Send.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*noo92aBA7vdvxV6SUGyzig.png\" /><figcaption>Packet sender</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/987/1*dMo_u89e1OHdqXDU5MQ8Mg.gif\" /><figcaption>Flow of UDP Server Packet Reception</figcaption></figure><p>That concludes this article. I hope you’ve gained valuable insights. If you’d like to access the code discussed in this article, you can find it on my GitHub repository: <a href=\"https://github.com/matheshyogeswaran/UDP-server-handles-packet-reception.git\">link</a>, If you’d like to connect with me on <a href=\"https://www.linkedin.com/in/mathesh-yogeswaran/\">LinkedIn</a>, please don’t hesitate to reach out.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=0309ebe51ee9\" width=\"1\" height=\"1\" alt=\"\">",
            "date_published": "2024-03-05T12:01:39.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/0b2a42d66a50",
            "url": "https://blog.bitsrc.io/building-authentication-in-react-native-with-firebase-a-step-by-step-guide-0b2a42d66a50?source=rss-505ef1b70e94------2",
            "title": "Building Authentication in React Native with Firebase: A Step-by-Step Guide",
            "content_html": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*85zu2mvaLI9cvXmDjQYakw.png\" /></figure><p>Here, we are going to delve into setting up React Native with Firebase and then setting up email authentication. Before proceeding, ensure that you have set up the environment for React Native. Once you have completed the setup, follow these steps</p><pre>npx react-native@latest init myapp</pre><h3>Next, proceed to create a project in Firebase</h3><ol><li>Navigate to <a href=\"https://console.firebase.google.com/u/0/\">Firebase Console</a></li><li>go to this link there you need to create the project</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/506/1*5I3ZBXF4kxmV8pDqb10yYw.png\" /></figure><h3>​</h3><p>3. Name it as you prefer</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/864/1*cEYnjoLPu2EtpHI84s3uig.png\" /></figure><p>4. Click continue</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/675/1*v7QoWnqKZG9vRyVM0ZKkeA.png\" /></figure><p>5. Click on Select an account</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/759/1*nBbuGB6OErfGtE-S6isUFQ.png\" /></figure><p>Here, choose the default account</p><p>6. Click on Create a project</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/853/1*fKk_8lZIP07dEawGYVhXEw.png\" /></figure><p>7. Click on Continue</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/857/1*6b82JMb7Vn3HJVPKEFyYvg.png\" /></figure><h3><strong>Now, let’s configure Firebase for your React Native project</strong></h3><ol><li>Click on Create an Android app.</li></ol><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/869/1*JZY5ZV48fiip-qZ3100w3g.png\" /></figure><p>2. Set the package name as “com.myapp” (ensure it matches your React Native package name).</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wbVy9z0nJZn0teyvJv80OQ.png\" /></figure><p>Enter ‘try’ as the nickname, then click on ‘Register app’.</p><p>3. Download the google-services.json file and place it in the android/app/ folder.</p><p>4. Add the following line at the bottom of android/app/build.gradle:</p><pre><br>apply plugin: ‘com.google.gms.google-services’</pre><p>5. In android/build.gradle, under dependencies, add:</p><pre>classpath ‘com.google.gms:google-services:4.4.0’</pre><p>6. Now, install the necessary Firebase packages</p><pre>npm install @react-native-firebase/app<br>npm install @react-native-firebase/auth</pre><p>Ensure that email authentication is enabled in your Firebase console.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CF9y9SCNA3X9pnnU2Fw6QQ.png\" /></figure><p>Finally, let’s create a simple authentication flow using Firebase in your React Native app.</p><p>Singin.tsx</p><pre>import React, { useState, useEffect } from &#39;react&#39;;<br>import { View, TextInput, Button, Alert, Text } from &#39;react-native&#39;;<br>import auth from &#39;@react-native-firebase/auth&#39;;<br><br>const Signin = () =&gt; {<br>  const [email, setEmail] = useState(&#39;&#39;);<br>  const [password, setPassword] = useState(&#39;&#39;);<br>  const [user, setUser] = useState(null); // To store user information<br><br>  useEffect(() =&gt; {<br>    const unsubscribe = auth().onAuthStateChanged(userAuth =&gt; {<br>      setUser(userAuth); <br>    });<br><br>    return unsubscribe;<br>  }, []);<br><br>  const handleSignUp = () =&gt; {<br>    auth()<br>      .createUserWithEmailAndPassword(email, password)<br>      .then(() =&gt; {<br>        console.log(&#39;User account created &amp; signed in!&#39;);<br>      })<br>      .catch(error =&gt; {<br>        if (error.code === &#39;auth/email-already-in-use&#39;) {<br>          Alert.alert(&#39;Error&#39;, &#39;That email address is already in use!&#39;);<br>        } else if (error.code === &#39;auth/invalid-email&#39;) {<br>          Alert.alert(&#39;Error&#39;, &#39;That email address is invalid!&#39;);<br>        } else {<br>          Alert.alert(&#39;Error&#39;, error.message);<br>        }<br>        console.error(error);<br>      });<br>  };<br><br>  const handleSignOut = () =&gt; {<br>    auth()<br>      .signOut()<br>      .then(() =&gt; {<br>        console.log(&#39;User signed out successfully&#39;);<br>      })<br>      .catch(error =&gt; {<br>        console.error(&#39;Error signing out:&#39;, error);<br>      });<br>  };<br><br>  return (<br>    &lt;View style={{ flex: 1, justifyContent: &#39;center&#39;, alignItems: &#39;center&#39; }}&gt;<br>      {user ? (<br>        &lt;View&gt;<br>          &lt;Text&gt;Welcome, {user.email}&lt;/Text&gt;<br>          &lt;Button title=&quot;Sign Out&quot; onPress={handleSignOut} /&gt;<br>        &lt;/View&gt;<br>      ) : (<br>        &lt;View&gt;<br>          &lt;TextInput<br>            style={{ height: 40, width: 300, borderColor: &#39;gray&#39;, borderWidth: 1, marginBottom: 20, paddingHorizontal: 10 }}<br>            onChangeText={text =&gt; setEmail(text)}<br>            value={email}<br>            placeholder=&quot;Email&quot;<br>            keyboardType=&quot;email-address&quot;<br>            autoCapitalize=&quot;none&quot;<br>          /&gt;<br>          &lt;TextInput<br>            style={{ height: 40, width: 300, borderColor: &#39;gray&#39;, borderWidth: 1, marginBottom: 20, paddingHorizontal: 10 }}<br>            onChangeText={text =&gt; setPassword(text)}<br>            value={password}<br>            placeholder=&quot;Password&quot;<br>            secureTextEntry<br>          /&gt;<br>          &lt;Button title=&quot;Sign Up&quot; onPress={handleSignUp} /&gt;<br>        &lt;/View&gt;<br>      )}<br>    &lt;/View&gt;<br>  );<br>};<br><br>export default Signin;</pre><p>App.tsx</p><pre>import { StyleSheet, Text, View, SafeAreaView } from &#39;react-native&#39;;<br>import React from &#39;react&#39;;<br>import Signin from &#39;./Signin&#39;;<br><br>const App = () =&gt; {<br>  return (<br>    &lt;SafeAreaView style={styles.container}&gt;<br>      &lt;Signin /&gt;<br>    &lt;/SafeAreaView&gt;<br>  );<br>};<br><br>export default App;<br><br>const styles = StyleSheet.create({<br>  container: {<br>    flex: 1,<br>  },<br>});</pre><p>With everything set up, you can now run your React Native application.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*l0YImyDq_hAGWb-iq-Fjow.gif\" /><figcaption>Demo of How It Works</figcaption></figure><p>For more detailed documentation and guides on integrating Firebase with React Native, you can visit the official React Native Firebase website at</p><p><a href=\"https://rnfirebase.io/\">React Native Firebase | React Native Firebase</a></p><p>Integrating Firebase with React Native empowers your app development.<em> </em>To access the complete code for this tutorial, please visit the <a href=\"https://github.com/matheshyogeswaran/react-native-firebase\">GitHub </a>repository. If you’d like to connect, feel free to find me on <a href=\"https://www.linkedin.com/in/mathesh-yogeswaran/\">LinkedIn</a>.</p><p>Happy coding, and best of luck with your projects!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=0b2a42d66a50\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://blog.bitsrc.io/building-authentication-in-react-native-with-firebase-a-step-by-step-guide-0b2a42d66a50\">Building Authentication in React Native with Firebase: A Step-by-Step Guide</a> was originally published in <a href=\"https://blog.bitsrc.io\">Bits and Pieces</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
            "date_published": "2024-02-23T04:48:34.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/089455d416ff",
            "url": "https://blog.bitsrc.io/inside-my-intern-software-engineering-tech-interview-089455d416ff?source=rss-505ef1b70e94------2",
            "title": "Inside My Intern Software Engineering Tech Interview",
            "content_html": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*i8gokljTAcuSJt3CdnRwew.png\" /><figcaption>Art Work By <a href=\"https://medium.com/@matheshyogeswaran\">Author</a></figcaption></figure><p>Hello,</p><p>In this blog, I’m thrilled to discuss the technical interview questions I faced during my internship in software engineering. I’ll provide the correct answers to these questions, and I hope you find valuable insights from this blog.</p><p>We will delve into this blog section by section, covering the following topics</p><blockquote>1. Introduction</blockquote><blockquote>2. OOP</blockquote><blockquote>3. DSA</blockquote><blockquote>4. React</blockquote><blockquote>5. NodeJS &amp; Database (MongoDB)</blockquote><blockquote>6. Live Coding</blockquote><blockquote>7. Git &amp; Github</blockquote><p>Now, let’s begin with the Introduction section.</p><blockquote>1. 👨‍🎓 Introduction</blockquote><p>First, they introduced themselves and asked me to introduce myself. In my introduction, I shared information about myself, discussed the projects I’ve worked on, mentioned my interests such as blogging, highlighted my participation in university activities, and concluded by talking about my extracurricular interests, including cricket. After this, they began asking technical questions.</p><blockquote>2. OOP</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-xdcgwkYcnmw4um7.png\" /></figure><blockquote>1. briefly explain about OOP concept?</blockquote><p>OOP stands for Object-Oriented Programming. It’s a programming paradigm that uses objects, which are instances of classes, to organize and structure code. OOP focuses on encapsulation, inheritance, and polymorphism as key principles to create modular and reusable code.</p><p><em>Encapsulation</em></p><ul><li>Encapsulation involves bundling the data (attributes) and the methods (functions) that operate on the data into a single unit called a class.</li><li><em>Example:</em> Think of a car as a class. It encapsulates attributes like color, model, and methods like start(), stop(), and drive(). The inner workings are hidden, and you interact with the car through its defined interface.</li></ul><p><em>Inheritance</em></p><ul><li>Inheritance allows a new class (subclass or derived class) to inherit attributes and methods from an existing class (superclass or base class).</li><li><em>Example:</em> Consider a hierarchy of animals. The superclass “Animal” might have attributes like “legs” and methods like “eat()”. The subclass “Dog” inherits these attributes and methods, but may also have its own unique attributes and methods.</li></ul><p><em>Polymorphism</em></p><ul><li>Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables a single interface to represent different types of objects.</li><li><em>Example:</em> Think of a “Shape” superclass with a method “area()”. Both a “Circle” and a “Square” can inherit from “Shape” and implement their own version of the “area()” method. You can then treat them polymorphically by calling “area()” without worrying about their specific type.</li></ul><p><em>Abstraction</em></p><ul><li>Abstraction is the process of simplifying complex systems by modeling classes based on the essential properties and behaviors they share.</li><li><em>Example:</em> A remote control is an abstraction for interacting with a TV. You don’t need to know the intricate details of how the TV works; you just need to know how to use the remote (pressing buttons like power, volume, and channel).</li></ul><blockquote>2. What are Access Modifiers in OOP? and explain?</blockquote><ul><li>Access modifiers in Object-Oriented Programming (OOP) are used to control the access to the members of a class, such as variables and methods.</li><li>There are four types of access modifiers: public, private, protected, and package/default.</li><li>Public members are accessible from anywhere, private members are only accessible within the same class, protected members are accessible within the same class and its subclasses, and package/default members are accessible within the same package.</li><li>Access modifiers help in implementing the principle of encapsulation, which is the bundling of data and methods that operate on the data, and controlling access to them.</li><li>By using access modifiers, developers can ensure data security, hide implementation details, and define clear boundaries for the interaction between different parts of a software system.</li></ul><blockquote>3. Can we use extends for two superclasses in Java, and if not, how can code reuse from multiple sources be achieved?</blockquote><ul><li>In Java, a class can extend only one superclass directly, which is known as a single inheritance. This means that you cannot use extends for two superclasses simultaneously. If you need to reuse code from multiple sources, you can use interfaces.</li></ul><blockquote>3. DSA</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/0*tdLW7aaT0qXDISjP.jpg\" /></figure><blockquote>1. Provide types of data structures along with examples</blockquote><p><em>Linear Data Structures</em></p><p>Linear structures store elements sequentially, connected to the previous and next element.</p><ul><li>Array</li><li>Stack</li><li>Queue</li><li>Linked List</li></ul><p><em>Non-linear Data Structures</em></p><p>Non-linear structures don’t arrange elements sequentially; an element can be connected to more than two elements.</p><ul><li>Tree</li><li>Graph</li></ul><blockquote>2. Explain the concepts of stack and queue.</blockquote><ul><li>Stack: Follows Last In, First Out (LIFO) rule.</li><li>Queue: Follows First In, First Out (FIFO) rule.</li></ul><blockquote>3. What are the operations in a queue? Please explain them.</blockquote><ul><li>Enqueue: Adds an element to the end of the queue.</li><li>Dequeue: Removes and returns the element from the front of the queue.</li><li>Front (Peek): Retrieves the element at the front without removal.</li><li>Is Empty: Checks if the queue has no elements.</li></ul><blockquote>4. How can you find the highest number in an array?</blockquote><pre>public class FindHighestNumber {<br>    public static void main(String[] args) {<br>        int[] numbers = {15, 7, 23, 45, 98, 64, 32};<br><br>        // Initialize a variable with the first element<br>        int maxNumber = numbers[0];<br><br>        // Iterate through the array and update the variable if needed<br>        for (int i = 1; i &lt; numbers.length; i++) {<br>            maxNumber = Math.max(maxNumber, numbers[i]);<br>        }<br><br>        // Final result<br>        System.out.println(&quot;The highest number in the array is: &quot; + maxNumber);<br>    }<br>}</pre><blockquote>5. how to find the last element of array?</blockquote><pre>let myArray = [1, 2, 3, 4, 5];<br>let lastElement = myArray[myArray.length — 1];<br>console.log(“The last element of the array is:”, lastElement);</pre><blockquote>4. ReactJS</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/0*nH2BWrjZeSSy7nat.png\" /></figure><blockquote>1.What are components in React?</blockquote><ul><li>Components in React are the building blocks that represent UI elements. They are reusable and independent, similar to functions in JavaScript.</li></ul><blockquote>2. What is the difference between functional components and class components?</blockquote><ul><li>In React, functional components are stateless and are defined as JavaScript functions, while class components can have state and lifecycle methods. With the introduction of Hooks in React, functional components can now also manage state and have lifecycle features.</li></ul><blockquote>3. What are the hooks you know?</blockquote><ul><li>useState</li><li>useEffect</li><li>useContext</li><li>useReducer</li><li>useCallback</li><li>useMemo</li></ul><blockquote>4.Why use useEffect?</blockquote><p>‘useEffect’ is a React hook used for handling side effects in functional components. Side effects are operations or actions that happen outside the typical flow of a component&#39;s render cycle, such as data fetching, subscriptions, manual DOM manipulations, and more. ‘useEffect’ allows you to perform these side effects in a way that is both efficient and avoids common issues associated with class component lifecycle methods.</p><blockquote>5. How we can use useEffect efficiency?</blockquote><p><em>Data Fetching</em></p><pre>useEffect(() =&gt; {<br>  // Fetch data from an API<br>}, []);</pre><p><em>Component Lifecycle</em></p><pre>useEffect(() =&gt; {<br>  // Component Did Mount<br><br>  return () =&gt; {<br>    // Component Will Unmount<br>  };<br>}, []);</pre><p><em>Component Did Update</em></p><pre>useEffect(() =&gt; {<br>  // Component Did Update<br><br>  return () =&gt; {<br>    // Cleanup logic (optional)<br>  };<br>}, [dependency]);</pre><p><em>Timers/Intervals</em></p><pre>useEffect(() =&gt; {<br>  const intervalId = setInterval(() =&gt; {<br>    // Perform periodic tasks<br>  }, 1000);<br><br>  return () =&gt; {<br>    clearInterval(intervalId);<br>  };<br>}, []);<br><br></pre><blockquote>6. what is props?</blockquote><ul><li>In React, props are used to pass data from one component to another. They are similar to function arguments and enable the creation of dynamic and reusable components. Props are read-only and help in building a parent-child component relationship, allowing the parent to pass data down to its child components. This mechanism facilitates the development of flexible and customizable React applications.</li></ul><blockquote>7.What is the purpose of the useContext hook in React</blockquote><ul><li>The useContext hook in React lets function components access the value of a context object, allowing them to consume the data or functionality provided by that context. It simplifies sharing data across the component tree without the need to manually pass props at each level.</li></ul><blockquote>8. what is useContext differ from props?</blockquote><ul><li>In React, think of props as a way for parent components to give information to their children. It&#39;s like passing a note down the family tree. On the other hand, useContext is like having a family bulletin board where everyone can check for information. It helps components anywhere in the tree share details without passing notes through each other.</li></ul><blockquote>5. NodeJS &amp; Database (MongoDB)</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*bg-8t9WGtBlLLMdM.png\" /></figure><blockquote>1.What is Node JS ?</blockquote><ul><li>Node.js is a free, cross-platform JavaScript runtime environment built on Chrome’s V8 engine, designed for server-side web development. It offers an asynchronous, event-driven model, making it efficient for handling concurrent requests and providing better performance.</li></ul><blockquote>2.What are the differences between SQL and NoSQL databases?</blockquote><ul><li>SQL databases are relational and have a structured schema, while NoSQL databases are non-relational and have a dynamic schema. SQL databases are vertically scalable and use SQL for data manipulation and retrieval, while NoSQL databases are horizontally scalable and do not necessarily use SQL. SQL databases are suitable for structured data with a predefined schema, while NoSQL databases are ideal for unstructured or dynamic data and high scalability requirements.</li></ul><blockquote>3. What are the four main types of databases supported by MongoDB?</blockquote><ul><li>MongDB supports document-oriented, key-value, wide-column, and, to some extent, graph databases.</li></ul><blockquote>4.Why is indexing important in MongoDB, and how does it impact query performance?</blockquote><ul><li>Indexes in MongoDB improve query speed by efficiently locating and retrieving data. They help narrow down search space, making read operations faster.</li></ul><blockquote>6. Live Coding</blockquote><blockquote>1. Write a recursive function that takes a number ’n’ and returns the nth number of the Fibonacci number. As a reminder Fibonacci series is the sequence of positive integers that start with 0 and 1 and the rest of the numbers are just the sum of the previous two numbers: O, 1, 1, 2, 3, 5, 8, 11…</blockquote><pre>public class Fibonacci {<br><br>    public static void main(String[] args) {<br>        // Example<br>        int n = 6; // Replace 6 with the desired value<br>        int result = fibonacci(n);<br>        System.out.println(&quot;The &quot; + n + &quot;th Fibonacci number is: &quot; + result);<br>    }<br><br>    public static int fibonacci(int n) {<br>        if (n &lt;= 1) {<br>            return n;<br>        } else {<br>            return fibonacci(n - 1) + fibonacci(n - 2);<br>        }<br>    }<br>}</pre><blockquote>2. Give a React code snippet for a factorial calculator where clicking a button once displays the factorial as 1, and clicking it twice displays the factorial as 2. The factorial value should correspond to the number of times the button is clicked.</blockquote><pre>import React, { useState } from &#39;react&#39;;<br><br>const FactorialCalculator = () =&gt; {<br>  const [clickCount, setClickCount] = useState(0);<br>  const [factorial, setFactorial] = useState(1);<br><br>  const calculateFactorial = () =&gt; {<br>    const newClickCount = clickCount + 1;<br>    setClickCount(newClickCount);<br><br>    const newFactorial = getFactorial(newClickCount);<br>    setFactorial(newFactorial);<br>  };<br><br>  const getFactorial = (n) =&gt; {<br>    if (n === 0 || n === 1) {<br>      return 1;<br>    } else {<br>      return n * getFactorial(n - 1);<br>    }<br>  };<br><br>  return (<br>    &lt;div&gt;<br>      &lt;button onClick={calculateFactorial}&gt;Click me!&lt;/button&gt;<br>      &lt;p&gt;Factorial after {clickCount} clicks: {factorial}&lt;/p&gt;<br>    &lt;/div&gt;<br>  );<br>};<br><br>export default FactorialCalculator;<br><br></pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*G4jkGlXp0dVZZbkIdV3ISQ.gif\" /><figcaption>FactorialCalculator Demo</figcaption></figure><blockquote>7. Git &amp; Github</blockquote><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LmwOiWqzcrhu7HMz.png\" /></figure><blockquote>1.Imagine you are a new employee at a software company. Explain how you would work with the project code, detailing your approach to using Git.</blockquote><ul><li>To work with a project using Git as a new employee, follow these steps:</li></ul><ol><li><em>Get access to the repository</em>: Request your team lead or the person responsible for the repository to provide you with the remote repository URL.</li><li><em>Clone the repository</em>: Clone the project repository from the remote source (e.g., GitHub) to your local machine or another machine you’ll be working on.</li></ol><pre>git clone &lt;repository_url&gt;</pre><p>3. <em>Create a branch</em>: Create a new branch for your specific feature or bug fix, ensuring that your changes do not affect the main branch or other ongoing work.</p><pre>git checkout -b your_branch_name</pre><p>4. <em>Make changes</em>: Start working on your feature or bug fix, making changes to the code as needed.</p><p>5. <em>Stage and commit changes</em>: Add and commit your changes to the local branch using Git commands. This creates a snapshot of your changes and associates a commit message explaining the changes made.</p><pre>git add . git commit -m &quot;Your commit message&quot;</pre><p>6. <em>Push changes</em>: Once your changes are ready to be shared with the team, push your local branch to the remote repository using the following command:</p><pre>git push origin your_branch_name</pre><p>7. <em>Create a pull request</em>: If you need to collaborate with other team members, create a pull request on the remote repository (e.g., GitHub) to share your changes with the team. This allows other team members to review your changes, provide feedback, and merge your changes into the main branch if they approve.</p><blockquote>2. How can one switch to an existing branch?</blockquote><ul><li>To switch to an existing branch in Git, you can use the following command</li></ul><pre>git checkout &lt;branch_name&gt;</pre><ul><li>Starting from Git version 2.23, you can also use the git switch command</li></ul><pre>git switch &lt;branch_name&gt;</pre><p>Both commands will switch your working directory to the specified existing branch.</p><blockquote>3.Is it possible to switch to another branch without committing changes if you are currently working on a branch?</blockquote><ul><li>Yes, it is generally possible to switch to another branch without committing changes in Git.</li></ul><blockquote>🌟 Conclusion</blockquote><p>Concluding my intern software engineering tech interview blog, I’m confident you’ll gain valuable insights. Connect with me on <a href=\"https://www.linkedin.com/in/mathesh-yogeswaran/\">LinkedIn</a> for more tech discussions and insights. 🌐</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=089455d416ff\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://blog.bitsrc.io/inside-my-intern-software-engineering-tech-interview-089455d416ff\">Inside My Intern Software Engineering Tech Interview</a> was originally published in <a href=\"https://blog.bitsrc.io\">Bits and Pieces</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
            "date_published": "2023-12-22T10:06:39.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/756fd5b861d0",
            "url": "https://medium.com/linkit-intecs/getting-started-with-crud-operations-in-spring-boot-and-mysql-a-beginners-guide-756fd5b861d0?source=rss-505ef1b70e94------2",
            "title": "Getting Started with CRUD Operations in Spring Boot and MySQL: A Beginner’s Guide",
            "content_html": "<p>An In-Depth Introduction to Creating, Reading, Updating, and Deleting Data in Spring Boot and MySQL for Beginners</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PP_wlA14N1FNFtbpFP7T4A.png\" /><figcaption>Artwork by <a href=\"https://medium.com/@matheshyogeswaran\">Author</a></figcaption></figure><p>Welcome to this beginner-friendly tutorial, where we’ll explore the world of CRUD applications built with Spring Boot. Our aim is to equip you with a solid understanding of constructing CRUD operations while adhering to best practices in project organization.</p><blockquote><strong>Getting Started with Spring Boot</strong></blockquote><p>Let’s jump right in by creating a basic Spring Boot application. Follow these steps:</p><p>Go to <a href=\"https://start.spring.io/\">Spring Initializr</a>.<br>Choose the Maven project option.<br>Select the ‘Spring Web’ and MySQL driver dependencies.<br>Click the ‘Generate’ button to initiate project generation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Rld_6Lw3jFkLp33bZ0wiFA.png\" /><figcaption>Creating Spring Boot Project in Spring Initializr</figcaption></figure><blockquote><strong>Organizing Your Project</strong></blockquote><p>Once the project is generated, open it in IntelliJ IDEA. Our first task is to establish a well-structured file hierarchy. Your project structure should look like this:</p><pre>src<br>├── main<br>│   ├── java<br>│   │   └── com<br>│   │       └── yourcompany<br>│   │           └── yourapp<br>│   │               ├── controller<br>│   │               │   └── UserController.java<br>│   │               ├── model<br>│   │               │   └── User.java<br>│   │               ├── repository<br>│   │               │   └── UserRepository.java<br>│   │               ├── service<br>│   │               │   ├── UserService.java<br>│   │               │   └── impl<br>│   │               │       └── UserServiceImpl.java<br>│   │               └── Application.java<br>│   ├── resources<br>│   │   ├── application.properties<br>│   │   └── static (for static resources like CSS and JS)<br>│   │   └── templates (for HTML templates if using server-side rendering)<br>│   └── sql (for database schema scripts)<br>└── test<br>   </pre><ul><li><strong>Controller</strong>: Contains the REST API controllers for handling HTTP requests and responses.</li><li><strong>Model</strong>: Defines the data models or entities of your application.</li><li><strong>Repository</strong>: Provides interfaces for database interaction using Spring Data JPA.</li><li><strong>Service</strong>: Implements business logic and acts as an intermediary between controllers and repositories.</li><li><strong>Impl</strong>: Contains the actual implementations of service interfaces.</li><li><strong>Resources</strong>: Contains application configuration files and static resources.</li><li><strong>Application.properties</strong>: Configuration file for Spring Boot application properties like database configuration.</li></ul><blockquote><strong>The Entity: User.java</strong></blockquote><p>Let’s create the entity class that represents our user:</p><pre>import jakarta.persistence.Entity;<br>import jakarta.persistence.GeneratedValue;<br>import jakarta.persistence.GenerationType;<br>import jakarta.persistence.Id;<br>import lombok.Data;<br><br><br>@Entity<br>@Data<br>public class User {<br>    @Id<br>    @GeneratedValue(strategy = GenerationType.IDENTITY)<br>    private Long id;<br><br>    private String name;<br>    private String address;<br><br>}</pre><blockquote><strong>UserRepository.java</strong></blockquote><p>Our UserRepository interfaces with the database:</p><pre><br>import com.basic.crud.model.User;<br>import org.springframework.data.jpa.repository.JpaRepository;<br><br>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {<br>}</pre><blockquote><strong>Implementing Business Logic: UserService.java</strong></blockquote><p>The UserService interface defines essential operations:</p><pre>package com.basic.crud.service;<br><br>import com.basic.crud.model.User;<br><br>import java.util.List;<br><br>public interface UserService {<br>    List&lt;User&gt; getAllEntities();<br>    User getEntityById(Long id);<br>    User createEntity(User entity);<br>    User updateEntity(Long id, User entity);<br>    void deleteEntity(Long id);<br>}</pre><blockquote><strong>UserServiceImpl.java</strong></blockquote><p>The UserServiceImpl brings the logic:</p><pre>package com.basic.crud.service;<br><br>import com.basic.crud.model.User;<br>import com.basic.crud.repository.UserRepository;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.stereotype.Service;<br><br>import java.util.List;<br><br>@Service<br>public class UserServiceImpl implements UserService {<br><br>    private final UserRepository repository;<br><br>    @Autowired<br>    public UserServiceImpl(UserRepository repository) {<br>        this.repository = repository;<br>    }<br><br>    @Override<br>    public List&lt;User&gt; getAllEntities() {<br>        return repository.findAll();<br>    }<br><br>    @Override<br>    public User getEntityById(Long id) {<br>        return repository.findById(id).orElse(null);<br>    }<br><br>    @Override<br>    public User createEntity(User entity) {<br>        return repository.save(entity);<br>    }<br><br>    @Override<br>    public User updateEntity(Long id, User entity) {<br>        if (repository.existsById(id)) {<br>            entity.setId(id);<br>            return repository.save(entity);<br>        }<br>        return null;<br>    }<br><br>    @Override<br>    public void deleteEntity(Long id) {<br>        repository.deleteById(id);<br>    }<br>}</pre><blockquote><strong>UserController.java</strong></blockquote><p>REST endpoints are orchestrated in UserController:</p><pre>package com.basic.crud.controller;<br><br>import com.basic.crud.model.User;<br>import com.basic.crud.service.UserService;<br>import org.springframework.beans.factory.annotation.Autowired;<br>import org.springframework.web.bind.annotation.*;<br><br>import java.util.List;<br><br>@RestController<br>@RequestMapping(&quot;/api/entities&quot;)<br>public class UserController {<br><br>    private final UserService service;<br><br>    @Autowired<br>    public UserController(UserService service) {<br>        this.service = service;<br>    }<br><br>    @GetMapping<br>    public List&lt;User&gt; getAllEntities() {<br>        return service.getAllEntities();<br>    }<br><br>    @GetMapping(&quot;/{id}&quot;)<br>    public User getEntityById(@PathVariable Long id) {<br>        return service.getEntityById(id);<br>    }<br><br>    @PostMapping<br>    public User createEntity(@RequestBody User entity) {<br>        return service.createEntity(entity);<br>    }<br><br>    @PutMapping(&quot;/{id}&quot;)<br>    public User updateEntity(@PathVariable Long id, @RequestBody User entity) {<br>        return service.updateEntity(id, entity);<br>    }<br><br>    @DeleteMapping(&quot;/{id}&quot;)<br>    public void deleteEntity(@PathVariable Long id) {<br>        service.deleteEntity(id);<br>    }<br>}</pre><blockquote><strong>Database Configuration: application.properties</strong></blockquote><p>Configure your database properties:</p><pre>spring.datasource.url=jdbc:mysql://localhost:3306/yourDatabaseName<br>spring.datasource.username=root<br>spring.datasource.password=yourpassword<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br>spring.jpa.hibernate.ddl-auto=update</pre><blockquote><strong>Understanding the Architecture</strong></blockquote><p>So, upon completing these steps, you have successfully implemented the CRUD operations. Now, let’s dive into how this file structure functions. First, within the controller, API calls are initiated. These API calls are then routed to the corresponding methods in the service layer. The service layer acts as a bridge between the controller and the actual business logic, decoupling the two components.</p><p>Inside the service layer, the defined methods are implemented within the impl package. This separation of concerns allows for a cleaner and more organized structure. The implementation layer handles the core business logic, such as retrieving data from the database, performing necessary calculations, and managing data modifications.</p><p>By adhering to this structure, your application gains a modular design that enhances maintainability and scalability. The division between the controller, service, and implementation layers enables better code organization and easier debugging. Additionally, this architecture aligns with the principles of the Spring framework, facilitating the development of robust and efficient applications.</p><p>In summary, the controller initiates API calls, which are then processed by the service layer. The service layer interfaces with the implementation layer to handle the actual business logic. Embracing this layered architecture contributes to the development of a more structured, maintainable, and comprehensible CRUD application.</p><p>And there you have it — an illustrative example of creating a user</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1003/1*1nyFWLUMM9URmJFVwaqLng.gif\" /><figcaption>Creating a User in Postman</figcaption></figure><blockquote><strong>Conclusion</strong></blockquote><p>In conclusion, this tutorial has guided us through creating a fundamental CRUD application using Spring Boot. By following the steps outlined here, we’ve grasped the importance of proper project structuring, entity definition, repository interfaces, service layers, and RESTful controllers.</p><p>To access the complete code for this tutorial, please visit the <a href=\"https://github.com/matheshyogeswaran/crud_basic_springboot.git\">GitHub</a> repository. If you’d like to connect, feel free to find me on <a href=\"https://www.linkedin.com/in/mathesh-yogeswaran/\">LinkedIn</a>.</p><p>Happy coding, and best of luck with your projects!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=756fd5b861d0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/linkit-intecs/getting-started-with-crud-operations-in-spring-boot-and-mysql-a-beginners-guide-756fd5b861d0\">Getting Started with CRUD Operations in Spring Boot and MySQL: A Beginner’s Guide</a> was originally published in <a href=\"https://medium.com/linkit-intecs\">LinkIT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
            "date_published": "2023-10-10T03:28:49.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/75ecad3b0452",
            "url": "https://medium.com/linkit-intecs/getting-started-with-crud-operations-in-spring-boot-and-dynamodb-a-beginners-guide-75ecad3b0452?source=rss-505ef1b70e94------2",
            "title": "Getting Started with CRUD Operations in Spring Boot and DynamoDB: A Beginner’s Guide",
            "content_html": "<p>An In-Depth Introduction to Creating, Reading, Updating, and Deleting Data in Spring Boot and DynamoDB for Beginners</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mUQ2rg6fvpj8IvfjT9vcKQ.png\" /><figcaption>Artwork by <a href=\"https://medium.com/@matheshyogeswaran\">Author</a></figcaption></figure><p>Welcome to this beginner-friendly tutorial, where we’ll explore the world of creating, reading, updating, and deleting data (CRUD) in Spring Boot applications. We’ll focus on using DynamoDB, a powerful and scalable database service from Amazon Web Services (AWS). Our goal is to help you understand how to build CRUD operations while organizing your project effectively.</p><blockquote><strong>Getting Started with Spring Boot</strong></blockquote><p>Let’s jump right in by creating a basic Spring Boot application. Follow these steps:</p><p>Go to <a href=\"https://start.spring.io/\">Spring Initializr</a>.<br>Choose the Maven project option.<br>Select the ‘Spring Web’ and ‘lombok’ dependencies.<br>Click the ‘Generate’ button to initiate project generation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bQKGJ6cLolpdOMowuGs_ww.png\" /><figcaption>Creating Spring Boot Project in Spring Initializr</figcaption></figure><blockquote><strong>Organizing Your Project</strong></blockquote><p>Once the project is generated, open it in IntelliJ IDEA. Our first task is to establish a well-structured file hierarchy. Your project structure should look like this:</p><pre>my-spring-boot-dynamodb-app/<br>├── src/<br>│   ├── main/<br>│   │   ├── java/<br>│   │   │   ├── com/<br>│   │   │   │   ├── myapp/<br>│   │   │   │   │   ├── config/<br>│   │   │   │   │   │   ├── DynamoDBConfig.java        # DynamoDB configuration<br>│   │   │   │   │   ├── controller/<br>│   │   │   │   │   │   ├── ProductController.java      # REST API controllers<br>│   │   │   │   │   ├── model/<br>│   │   │   │   │   │   ├── Product.java               # Product entity class<br>│   │   │   │   │   │   ├── ProductDTO.java            # Product Data Transfer Object<br>│   │   │   │   │   ├── service/<br>│   │   │   │   │   │   ├── ProductService.java         # Service layer interfaces<br>│   │   │   │   │   │   ├── ProductServiceImpl.java     # Service layer implementation<br>│   │   │   │   │   ├── Application.java               # Spring Boot main application class<br>│   │   ├── resources/<br>│   │   │   ├── application.properties                  # Application-specific properties<br>├── test/  </pre><ul><li><strong>Controller</strong>: Contains the REST API controllers for handling HTTP requests and responses.</li><li><strong>Model</strong>: Defines the data models or entities of your application.</li><li><strong>Service</strong>: Implements business logic and acts as an intermediary between controllers and repositories.</li><li><strong>Impl</strong>: Contains the actual implementations of service interfaces.</li><li><strong>Resources</strong>: Contains application configuration files and static resources.</li><li><strong>Application.properties</strong>: Configuration file for Spring Boot application properties like database configuration.</li><li><strong>DynamoDBConfig.java</strong>: This Java class is responsible for configuring the connection to DynamoDB. It’s where you’d set AWS credentials and DynamoDB endpoint details.</li></ul><blockquote>Include AWS dependency</blockquote><p>Ensure that you include the required AWS dependencies in your project’s pom.xml. To do so, add the following dependency snippet to your pom.xml file:</p><pre> &lt;dependency&gt;<br>   &lt;groupId&gt;com.amazonaws&lt;/groupId&gt;<br>   &lt;artifactId&gt;aws-java-sdk-dynamodb&lt;/artifactId&gt;<br>   &lt;version&gt;1.12.272&lt;/version&gt;<br>  &lt;/dependency&gt;</pre><blockquote><strong>Database Configuration: application.properties</strong></blockquote><p>The main focus here is connecting to DynamoDB, and the steps for obtaining the AWS access key and secret key are crucial:</p><h3>1. Go to the AWS console and Type “iam”</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lfrkvYXbD2JaxhFojC4Nkw.png\" /><figcaption>Search IAM</figcaption></figure><h3>2. Click on IAM</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GMKPnDfRAwPUXL76Lluxdg.png\" /><figcaption>Click on IAM</figcaption></figure><h3>3. Click on Users</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*LVqy9tBfczFmFbJvZYVvPA.png\" /><figcaption>Click on Users</figcaption></figure><h3>4. Click on mathesh</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/694/1*Dabequ5tKk6EJp0VJ2f1sg.png\" /><figcaption>Click on mathesh</figcaption></figure><h3>5. Click on Security Credentials</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*O48lL0yrCO-67JeXg586FA.png\" /><figcaption>Click on Security Credentials</figcaption></figure><h3>6. Click on Create access key</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/975/1*oMGdWw4rLzy0WmRWtdWHmA.png\" /><figcaption>Click on Create access key</figcaption></figure><h3>7. Select Local code</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*29LWS66j3NDHh9M5lQ5ETQ.png\" /><figcaption>Select Local code</figcaption></figure><h3>8. Check I understand the above recommendation and want to proceed to create an access key.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Fqc44QgajA0AS76o2l0mUw.png\" /><figcaption>Check the box</figcaption></figure><h3>9. Click on Next</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zBBrZny9Sgexqj52D646oA.png\" /><figcaption>Click on Next</figcaption></figure><h3>10. Type the description</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KjMiIVCaXKnOgXWwrjTdLA.png\" /><figcaption>Type the description</figcaption></figure><h3>11. Click on Create access key</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*axvaVdxXgWBIfc3zQgljoQ.png\" /><figcaption>Click on Create access key</figcaption></figure><h3>12. Click on Download .csv file</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iY2_910Gw1wUQIYrKymq-w.png\" /><figcaption>Click on Download .csv file</figcaption></figure><h3>13. Click on Done</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/953/1*e4BsNxN8OaLERXvTri6IAg.png\" /><figcaption>Click on Done</figcaption></figure><p>From this, you can get the aws.access.key and aws.access.secret-key. Then, you need to create the DynamoDB instance, and you can get the aws.dynamodb.endpoint as shown below:</p><pre>server:<br>#Spring Boot Applicaiton Port<br>port: 8080<br>#Endpoint that application might connect to<br>aws.dynamodb.endpoint: https://dynamodb.&lt;Your dynamoDB instance located&gt;.amazonaws.com<br># Access credentials for the aws programmatic access. Please make sure that you donot share this information with others or commit<br># it to public.<br>aws.access.key: &lt;Your access key&gt;<br>aws.access.secret-key: &lt;Your secret key&gt;<br># your AWS region where dynamo db instance is located.<br>aws.region: &lt;Your dynamoDB instance located&gt;</pre><blockquote><strong>The Entity: Product.java</strong></blockquote><p>Before this, you need to create the DynamoDB in AWS. Follow these steps:</p><p>1. Search DynamoDB</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/958/1*kYiEMuxGZnJG3TWA2uXmLA.png\" /><figcaption>Search DynamoDB</figcaption></figure><h3>2. Click on DynamoDB</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/949/1*Ohm3_5pVE5vMNwVbFqyn0A.png\" /><figcaption>Click on DynamoDB</figcaption></figure><h3>3. Click on Create Table</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/957/1*8lYMWaVa5-7r16uwUMNMFw.png\" /><figcaption>Click on Create Table</figcaption></figure><h3>4. Type “Product”</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/957/1*Ek6CVIm97nFFIOuYA8KQ5A.png\" /><figcaption>Type “Product”</figcaption></figure><h3>5. Type “id” as the partition key</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/952/1*mRHEL6E159hblK2qbybACw.png\" /><figcaption>Type “id” as the partition key</figcaption></figure><h3>6. Click on Create Table</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/968/1*6iNH9DWhBQhsh26WgpCLuw.png\" /><figcaption>Click on Create table</figcaption></figure><p>Let’s create the entity class that represents our product:</p><pre>package com.crudDynamo.CrudDynamo.model;<br><br>import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;<br>import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;<br>import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;<br>import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;<br>import lombok.Data;<br><br>@DynamoDBTable(tableName = &quot;Product&quot;) // This must be the same as in DynamoDB<br>@Data<br>public class Product {<br>    @DynamoDBHashKey(attributeName = &quot;id&quot;)<br>    @DynamoDBAutoGeneratedKey  <br>    private String id;<br><br>    @DynamoDBAttribute<br>    private String name;<br><br>    @DynamoDBAttribute<br>    private double price;<br><br>    @DynamoDBAttribute<br>    private Long stockCount;<br><br>}</pre><blockquote>ProductDTO.java</blockquote><pre>package com.crudDynamo.CrudDynamo.model;<br><br>import lombok.Data;<br><br>@Data<br>public class ProductDTO {<br><br>    private String id;<br>    private String name;<br>    private double price;<br>    private Long stockCount;<br><br>}<br></pre><blockquote><strong>Implementing Business Logic: ProductServiceBL.java</strong></blockquote><pre>package com.crudDynamo.CrudDynamo.service.BL;<br><br><br>import com.crudDynamo.CrudDynamo.model.ProductDTO;<br><br>import java.util.List;<br><br>public interface ProductServiceBL {<br>    List&lt;ProductDTO&gt; getAllProducts();<br><br>    ProductDTO getProductById(String id);<br><br>    ProductDTO createNewProduct(ProductDTO dto);<br><br>    ProductDTO updateProduct(String id, ProductDTO dto);<br><br>    void deleteProduct(String id);<br><br><br>}</pre><blockquote><strong>ProductServiceImpl.java</strong></blockquote><pre>package com.crudDynamo.CrudDynamo.service.Impl;<br><br><br>import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;<br>import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;<br><br>import com.crudDynamo.CrudDynamo.model.Product;<br>import com.crudDynamo.CrudDynamo.model.ProductDTO;<br>import com.crudDynamo.CrudDynamo.service.BL.ProductServiceBL;<br>import org.springframework.beans.BeanUtils;<br>import org.springframework.stereotype.Service;<br><br>import java.util.List;<br>import java.util.stream.Collectors;<br><br>@Service<br>public class ProductServiceImpl implements ProductServiceBL {<br><br>    private final DynamoDBMapper dynamoDBMapper;<br><br>    public ProductServiceImpl(DynamoDBMapper dynamoDBMapper) {<br>        this.dynamoDBMapper = dynamoDBMapper;<br>    }<br><br>    @Override<br>    public List&lt;ProductDTO&gt; getAllProducts() {<br>        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();<br>        List&lt;Product&gt; products = dynamoDBMapper.scan(Product.class, scanExpression);<br>        return products.stream().map(this::convertToDTO).collect(Collectors.toList());<br>    }<br><br>    @Override<br>    public ProductDTO getProductById(String id) {<br>        Product product = dynamoDBMapper.load(Product.class, id);<br>        return convertToDTO(product);<br>    }<br><br>    @Override<br>    public ProductDTO createNewProduct(ProductDTO dto) {<br>        Product product = new Product();<br>        BeanUtils.copyProperties(dto, product);<br><br>        dynamoDBMapper.save(product);<br><br>        return convertToDTO(product);<br>    }<br><br>    @Override<br>    public ProductDTO updateProduct(String id, ProductDTO dto) {<br>        Product product = dynamoDBMapper.load(Product.class, id);<br>        BeanUtils.copyProperties(dto, product);<br><br>        dynamoDBMapper.save(product);<br><br>        return convertToDTO(product);<br>    }<br><br>    @Override<br>    public void deleteProduct(String id) {<br>        Product product = dynamoDBMapper.load(Product.class, id);<br>        if (product != null) {<br>            dynamoDBMapper.delete(product);<br>        }<br>    }<br><br>    private ProductDTO convertToDTO(Product product) {<br>        ProductDTO dto = new ProductDTO();<br>        BeanUtils.copyProperties(product, dto);<br>        return dto;<br>    }<br>}</pre><blockquote><strong>ProductController.java</strong></blockquote><pre>package com.crudDynamo.CrudDynamo.controller;<br><br><br>import com.crudDynamo.CrudDynamo.model.ProductDTO;<br>import com.crudDynamo.CrudDynamo.service.BL.ProductServiceBL;<br>import org.springframework.web.bind.annotation.*;<br><br>import java.util.List;<br><br>@RestController<br>@RequestMapping(&quot;/api/products&quot;)<br>public class ProductController {<br><br>    private final ProductServiceBL productServiceBL;<br><br>    public ProductController(ProductServiceBL productServiceBL) {<br>        this.productServiceBL = productServiceBL;<br>    }<br><br>    @GetMapping<br>    public List&lt;ProductDTO&gt; getAllProducts() {<br>        return productServiceBL.getAllProducts();<br>    }<br><br>    @GetMapping(&quot;/{id}&quot;)<br>    public ProductDTO getProductById(@PathVariable String id) {<br>        return productServiceBL.getProductById(id);<br>    }<br><br>    @PostMapping<br>    public ProductDTO createProduct(@RequestBody ProductDTO productDTO) {<br>        return productServiceBL.createNewProduct(productDTO);<br>    }<br><br>    @PutMapping(&quot;/{id}&quot;)<br>    public ProductDTO updateProduct(@PathVariable String id, @RequestBody ProductDTO productDTO) {<br>        return productServiceBL.updateProduct(id, productDTO);<br>    }<br><br>    @DeleteMapping(&quot;/{id}&quot;)<br>    public void deleteProduct(@PathVariable String id) {<br>        productServiceBL.deleteProduct(id);<br>    }<br><br><br>}<br></pre><p>Here, we’ll provide a visual illustration of how our CRUD application operates using Postman.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bTvorXGEcYq-y1MhVamQSw.gif\" /><figcaption>CRUD application operates using Postman</figcaption></figure><blockquote><strong>Conclusion</strong></blockquote><p>In conclusion, we delved into building CRUD applications with Spring Boot and DynamoDB. You’ve learned essential concepts such as project setup, code organization, database configuration, entity class creation, business logic implementation, and REST API endpoints. To access the full source code with detailed examples, visit our <a href=\"https://github.com/matheshyogeswaran/CRUD-dynamoDB-SpringBoot.git\">GitHub repository</a>. Feel free to connect with me on <a href=\"https://www.linkedin.com/in/mathesh-yogeswaran/\">LinkedIn</a>. Happy coding!💻</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=75ecad3b0452\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/linkit-intecs/getting-started-with-crud-operations-in-spring-boot-and-dynamodb-a-beginners-guide-75ecad3b0452\">Getting Started with CRUD Operations in Spring Boot and DynamoDB: A Beginner’s Guide</a> was originally published in <a href=\"https://medium.com/linkit-intecs\">LinkIT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
            "date_published": "2023-09-08T10:09:39.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/86cbf76661d0",
            "url": "https://medium.com/linkit-intecs/demystifying-deployment-a-step-by-step-guide-to-deploying-your-mern-stack-app-on-render-86cbf76661d0?source=rss-505ef1b70e94------2",
            "title": "Demystifying Deployment: A Step-by-Step Guide to Deploying Your MERN Stack App on Render",
            "content_html": "<p>Deploying Your MERN Stack App on Render: A Step-by-Step Guide to Cost-Free Hosting</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*CEo2CtAISlEVvbCYetQVuQ.png\" /><figcaption>Artwork by <a href=\"https://medium.com/@matheshyogeswaran\">Author</a></figcaption></figure><h3><strong>Introduction</strong></h3><p>Nowadays, the MERN stack is rapidly gaining popularity, and deploying MERN projects has become essential. In this blog, I will guide you on how to deploy your MERN projects for free using render.com.</p><p>I have divided the content into sections.</p><ul><li>Database Setup</li><li>Preparing Your App for Deployment</li><li>Backend Deployment on Render</li><li>Frontend Deployment on Render</li></ul><h3>Database Setup</h3><p>We are utilizing MongoDB Atlas for this purpose.</p><h3>1. Click on Todo.</h3><p>At this point, you’ll need to create a new project.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*yVOME8qU3SGIcp1S\" /><figcaption>Click on Todo</figcaption></figure><h3>2. Click on New Project.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*VC8Ycz5eE7dtY0Ps\" /><figcaption>Click on New Project.</figcaption></figure><h3>3. Type “Deploy”.</h3><p>Here, assign a name of your choice to the project.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OYaSfmgm8zMRCri7\" /><figcaption>Type “Deploy”</figcaption></figure><h3>4. Click on Create Project.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*K3OtiO0kWZ4NO0RM\" /><figcaption>Click on Create Project</figcaption></figure><h3>5. Click on Create.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*iKsJlIbVePM4NOZs\" /><figcaption>Click on Create</figcaption></figure><h3>6. Select M0…</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*-sUl1QcUQTBmay0C\" /><figcaption>Select M0</figcaption></figure><h3>7. Click on Create.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZlPVCHzI-ldcf23A\" /><figcaption>Click on Create</figcaption></figure><h3>8. Copy the username and password.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DqQUNC24ILuwPoer\" /><figcaption>Copy user name and password</figcaption></figure><h3>9. Click on Create User.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/799/1*MEOHCQXtMOlQ6wc6eDYH2w.png\" /><figcaption>Click on Create User</figcaption></figure><h3>10. Type “for all IP”.</h3><p>Setting MongoDB to use “0.0.0.0” as its IP address enables it to be accessed from any device.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gv901c9LEzUwQ0-1\" /><figcaption>Type “for all IP”</figcaption></figure><h3>11. Click on Add Entry.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*1OPLppfaYcUlkN8B\" /><figcaption>Click on Add Entry</figcaption></figure><h3>12. Click on Finish and Close.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rrCFAwfIYwT97-00\" /><figcaption>Click on Finish and Close</figcaption></figure><h3>13. Click on Go to Overview.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*tDMYSZBgmmq-aspn\" /><figcaption>Click on Go to Overview</figcaption></figure><p>Up to this point, we have created the database. Now, let’s move on to the next step</p><h3><strong>Preparing Your App for Deployment</strong></h3><p>At this juncture, I’m assuming that you possess a file structure resembling the following:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/909/1*CtegNSLAqPueaZ037fWwbw.png\" /><figcaption>File structure</figcaption></figure><p>Next, you’ll need to create a package.json file with the following content:</p><pre>{<br>  &quot;name&quot;: &quot;todo-mern&quot;,<br>  &quot;version&quot;: &quot;1.0.0&quot;,<br>  &quot;description&quot;: &quot;&quot;,<br>  &quot;main&quot;: &quot;index.js&quot;,<br>  &quot;scripts&quot;: {<br>    &quot;install-server&quot;: &quot;cd Server &amp;&amp; npm install&quot;,<br>    &quot;start-server&quot;: &quot;cd Server &amp;&amp; node index.js&quot;,<br>    &quot;install-client&quot;: &quot;cd client &amp;&amp; npm install&quot;,<br>    &quot;build-client&quot;: &quot;cd client &amp;&amp; npm run build&quot;,<br>    &quot;start-client&quot;: &quot;cd client &amp;&amp; npm run start&quot;<br>  },<br>  &quot;keywords&quot;: [],<br>  &quot;author&quot;: &quot;&quot;,<br>  &quot;license&quot;: &quot;ISC&quot;<br>}</pre><p>Include these lines in your package.json file.</p><p><strong>“install-server”: “cd Server &amp;&amp; npm install”</strong></p><p>This script installs the necessary tools for your backend (server). It moves to the “Server” folder and runs the command to install all required components.</p><p><strong>“start-server”: “cd Server &amp;&amp; node index.js”</strong></p><p>This script starts your backend server. It goes to the “Server” folder and launches the server using the “index.js” file.</p><p><strong>“install-client”: “cd client &amp;&amp; npm install”</strong></p><p>This script installs what you need for your front end. It switches to the “client” folder and installs everything listed in the package file.</p><p><strong>“build-client”: “cd client &amp;&amp; npm run build”</strong></p><p>This script builds your front end for deployment. It enters the “client” folder and creates an optimized version of your app that’s ready to go live.</p><p><strong>“start-client”: “cd client &amp;&amp; npm run start”</strong></p><p>This script kicks off your front-end development server. It enters the “client” folder and starts a server for you to work on your app locally.</p><p>Upon completing these steps, you can proceed to render.com for the backend configuration.</p><h3><strong>Backend Deployment on Render</strong></h3><h3>1. Click on New.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rBDCk-GUW4rFwaD5\" /><figcaption>Click on New</figcaption></figure><h3>2. Click on Web Service.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*QzCCT5Yh4gRqrWSy\" /><figcaption>Click on Web Service</figcaption></figure><h3>4. Click on Connect.</h3><p>At this stage, you should connect the repository that you intend to deploy.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*2b3efMFGshBseWg7\" /><figcaption>Click on Connect</figcaption></figure><h3>5. Type “todo-medium-BE”.</h3><p>Provide a name for the backend web service in this field.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*sl_Opnamcex5YncK\" /><figcaption>Type “todo-medium-BE”</figcaption></figure><h3>6. Type “npm run install-server”.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*HsrbGcUa2FUl0z2V\" /><figcaption>Type “npm run install-server”</figcaption></figure><h3>7. Type “npm run start-server”.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*zgSt3bfY9YhoiUKr\" /><figcaption>Type “npm run start-server”</figcaption></figure><h3>8. Click on Advanced.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*NQaPrhZgmEgLvlRW\" /><figcaption>Click on Advanced</figcaption></figure><h3>9. Add Environment Variable.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*8MxPYujKLrb0dGdc\" /><figcaption>Add Environment Variable</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*xG5-Tes2KQEnXubO\" /><figcaption>Add Environment Variable</figcaption></figure><h3>10. Add Environment value here.</h3><pre>mongodb+srv://uomidealize:&lt;password&gt;@cluster0.0qg7frn.mongodb.net/</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ntvBc3zXCYb_DloV\" /><figcaption>Add Environment value</figcaption></figure><h3>11. Click on Create Web Service.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*UM7J_HkTdAEUm8vl\" /><figcaption>Click on Create Web Service</figcaption></figure><p>Next, you’ll obtain the link for your backend</p><h3>1. Click on todo-medium-BE.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ZQonKg29WiPZQMjD\" /><figcaption>Click on todo-medium-BE</figcaption></figure><h3>2. Click on Copy.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*pnNvioWZ2f9D0Azg\" /><figcaption>Click on Copy</figcaption></figure><h3><strong>Frontend Deployment on Render</strong></h3><h3>1. Click on New.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6RkwcsGz4RBlyMAj\" /><figcaption>Click on New</figcaption></figure><h3>2. Click on Static Site.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YSqzbB7zDLJ6UyLs\" /><figcaption>Click on Static Site</figcaption></figure><h3>3. Click on Connect the repo.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/534/1*YPCXabQrhuDVgGCQJF-ShA.png\" /><figcaption>Click on Connect the repo</figcaption></figure><h3>4. Type “todo-medium-FE”.</h3><p>Provide a name for the frontend static website e in this field.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*gY-AU0Diz1zuwUi7\" /><figcaption>Type “todo-medium-FE”</figcaption></figure><h3>5. Type “npm run install-client &amp;&amp; npm run build-client”.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*fqOX5oGDdjsJ8fp6\" /><figcaption>Type “npm run install-client &amp;&amp; npm run build-client”</figcaption></figure><h3>6. In the Publish directory Type “./client/build”.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*vK-IKR-LzNlSbQeD\" /><figcaption>In the Publish directory Type “./client/build”</figcaption></figure><h3>7. Click on Advanced.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Ab8djfr6haZj0ceA\" /><figcaption>Click on Advanced</figcaption></figure><h3>8. Click on Add Environment Variable.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*s864OJK4puV7vVKc\" /><figcaption>Click on Add Environment Variable</figcaption></figure><h3>9. Type “REACT_APP_API_URL”.</h3><p>In this section, add the environment variable</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*AGVuIMD5MWTlRh3w\" /><figcaption>Type “REACT_APP_API_URL”</figcaption></figure><h3>10. In env variable Type “https://todo-medium-be.onrender.com/api/todos”.</h3><p>We will retrieve this link from the backend Render URL: <a href=\"https://todo-medium-be.onrender.com/\">https://todo-medium-be.onrender.com</a>, and then append ‘/api/todos’ as the endpoint in Node.js</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*MFIJxIKDJireX0iL\" /><figcaption>Env variable Type “https://todo-medium-be.onrender.com/api/todos”</figcaption></figure><h3>11. Click on Create Static Site.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*e8AiOJHGMbWqtdOD\" /><figcaption>Click on Create Static Site</figcaption></figure><p>Finally, here is the link to your deployed application</p><h3>1. Click on todo-medium-FE.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Zd-fqLXKFDQllEGd\" /><figcaption>Click on todo-medium-FE</figcaption></figure><h3>2. Click on Copy.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YkzGr9pNkttsRrFD\" /><figcaption>Click on Copy</figcaption></figure><p>You can visit the website by following this link: <a href=\"https://todo-medium-fe.onrender.com/\">https://todo-medium-fe.onrender.com</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NeJPWc8enKLcWsNWZBr1QA.gif\" /><figcaption>Final Output</figcaption></figure><h3><strong>Conclusion</strong></h3><p>In conclusion, you’ve successfully navigated the deployment process of your MERN stack app on Render. From setting up the database to deploying both the backend and front end, you’ve gained hands-on experience making your app live.</p><p>To explore further or contribute, check out the complete source code on my GitHub repository: <a href=\"https://github.com/matheshyogeswaran/TodoDeploy.git\">GitHub — TodoDeploy</a>.</p><p>Armed with this knowledge, you’re ready to confidently deploy MERN apps and embark on your development journey. Thanks for joining me on this deployment adventure!</p><p><strong>About the Author</strong></p><p>I’m passionate about making technology accessible. Connect with me on <a href=\"https://www.linkedin.com/in/mathesh-yogeswaran/\">[LinkedIn]</a> to learn more about my work. Feel free to reach out with your feedback and questions. Happy coding!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=86cbf76661d0\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://medium.com/linkit-intecs/demystifying-deployment-a-step-by-step-guide-to-deploying-your-mern-stack-app-on-render-86cbf76661d0\">Demystifying Deployment: A Step-by-Step Guide to Deploying Your MERN Stack App on Render</a> was originally published in <a href=\"https://medium.com/linkit-intecs\">LinkIT</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
            "date_published": "2023-09-08T10:05:50.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/adc86da2f9f1",
            "url": "https://blog.bitsrc.io/building-real-time-applications-with-socket-io-adc86da2f9f1?source=rss-505ef1b70e94------2",
            "title": "Building Real-Time Applications with Socket.io,",
            "content_html": "<h3>Building Real-Time Applications with Socket.io, React.js, Node.js, and Express.js: A Comprehensive Guide</h3><p>Real-Time Web Development: A Comprehensive Guide to Building Interactive Applications with Socket.io, React.js, Node.js, and Express.js</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*w1Rm2Wscw-iwsvhFV8vXRA.png\" /><figcaption>Real-Time Applications with Socket.io, React.js, Node.js, and Express.js</figcaption></figure><p>In today’s digital landscape, real-time communication has become a crucial aspect of web applications. Whether it’s chat applications, collaborative tools, or live updates, users expect instant updates without having to refresh the page. This is where Socket.io, React.js, Node.js, and Express.js come into play.</p><p>Socket.io is a powerful library that enables bidirectional, event-based communication between a web server and clients. When combined with React.js, a popular JavaScript library for building user interfaces, and Node.js with Express.js, a versatile web application framework, developers can create seamless and interactive real-time applications.</p><p>In this blog, we will explore the basics of Socket.io and dive into how it can be integrated with React.js, Node.js, and Express.js. We will discuss the fundamental concepts, step-by-step implementation, and best practices for building real-time applications. By the end of this guide, you’ll have a solid understanding of how to leverage these technologies to create dynamic and responsive applications that keep users engaged in real time. So, let’s get started on this exciting journey of real-time web development with Socket.io, React.js, Node.js, and Express.js!</p><p>For first we need client and server folder, in the server folder we Initialize the Node.js project by</p><pre>npm init</pre><p>Then Install the required dependencies (Express, Cors, Nodemon, and Socket.io):</p><pre>npm install express cors nodemon socket.io</pre><ul><li>Express: Express is a popular web application framework for Node.js. It provides a simple and flexible way to build web applications and APIs.</li><li>Cors: Cross-Origin Resource Sharing (CORS) is a security mechanism implemented by web browsers to restrict access to resources from different origins. When developing web applications, you may encounter CORS issues when making requests from one domain to another. The cors library is used to handle CORS-related concerns in your Express application.</li><li>Nodemon: Nodemon is a development utility that automatically restarts your Node.js application whenever changes are detected in your source code.</li><li>Socket.io: Socket.io is a JavaScript library that enables real-time, bidirectional communication between the web browser and the server. It’s commonly used for building applications that require instant data updates or interactive features.</li></ul><p>after that create index.js in server folder and add these codes.</p><pre>const express = require(&#39;express&#39;);<br>const app = express();<br>const http = require(&#39;http&#39;);<br>const { Server } = require(&quot;socket.io&quot;);<br>const cors = require(&#39;cors&#39;);<br>app.use(cors());<br><br>const server = http.createServer(app);<br>const io = new Server(server, {<br>    cors: {origin:&quot;http://localhost:3000&quot;, methods: [&quot;GET&quot;, &quot;POST&quot;]},<br>});<br><br>server.listen(4000, () =&gt; { console.log(&quot;listening on *:4000&quot;); });</pre><p>Now we dive into the client folder , here create the react app by,</p><pre>npx create-react-app .</pre><p>here you need to install socket io client dependency by,</p><pre> npm install socket.io-client</pre><p>after in the App.js add these codes.</p><pre>import &quot;./App.css&quot;;<br>import { useEffect } from &quot;react&quot;;<br>import io from &quot;socket.io-client&quot;;<br>const socket = io.connect(&quot;http://localhost:4000&quot;);<br><br>function App() {<br>  function sendMessage() {<br>    console.log(&quot;Button clicked&quot;);<br>    socket.emit(&quot;send_message&quot;, { message: &quot;Hello from client&quot; });<br>  }<br>  useEffect(() =&gt; {<br>    socket.on(&quot;receive_message&quot;, (data) =&gt; {<br>      alert(data.message);<br>    });<br>  }, [socket]);<br><br>  return (<br>    &lt;div className=&quot;App&quot;&gt;<br>      &lt;input placeholder=&quot;Message&quot; /&gt;<br>      &lt;button onClick={sendMessage}&gt;Send message&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>}<br><br>export default App;</pre><p>Additionally, please include the following lines of code within the index.js file located in the server folder.</p><pre>io.on(&quot;connection&quot;, (socket) =&gt; {<br>  console.log(`a user connected ${socket.id}`);<br>  <br>  socket.on(&quot;send_message&quot;, (data) =&gt; {<br>    socket.broadcast.emit(&quot;receive_message&quot;, data);<br>  });<br>});</pre><p>With these lines of code, you can send a default message, ‘Hello from the client,’ and broadcast it to all other users.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*owCRflCEFkCAw6365cvt0g.gif\" /><figcaption>Default message broadcast to all other users</figcaption></figure><p>So far, socket.io is functioning properly. Now, our only remaining task is to send the message data through it.</p><p>Here is the final version of the client’s app.js file</p><pre>import &quot;./App.css&quot;;<br>import { useEffect, useState } from &quot;react&quot;;<br>import io from &quot;socket.io-client&quot;;<br>const socket = io.connect(&quot;http://localhost:4000&quot;);<br><br>function App() {<br>  const [message, setMessage] = useState(&quot;&quot;);<br>  const [messageReceived, setMessageReceived] = useState(&quot;&quot;);<br>  function sendMessage() {<br>    console.log(&quot;Button clicked&quot;);<br>    socket.emit(&quot;send_message&quot;, { message: message });<br>  }<br>  useEffect(() =&gt; {<br>    socket.on(&quot;receive_message&quot;, (data) =&gt; {<br>      setMessageReceived(data.message);<br>    });<br>  }, [socket]);<br><br>  return (<br>    &lt;div className=&quot;App&quot;&gt;<br>      &lt;input<br>        placeholder=&quot;Message&quot;<br>        onChange={(e) =&gt; {<br>          setMessage(e.target.value);<br>        }}<br>      /&gt;<br>      &lt;button onClick={sendMessage}&gt;Send message&lt;/button&gt;<br>      &lt;h1&gt;<br>        Message: {messageReceived}&lt;/h1&gt;<br>    &lt;/div&gt;<br>  );<br>}<br><br>export default App;</pre><p>Here is the final version of the server’s index.js file</p><pre>const express = require(&quot;express&quot;);<br>const app = express();<br>const http = require(&quot;http&quot;);<br>const { Server } = require(&quot;socket.io&quot;);<br>const cors = require(&quot;cors&quot;);<br>app.use(cors());<br><br>const server = http.createServer(app);<br>const io = new Server(server, {<br>  cors: { origin: &quot;http://localhost:3000&quot;, methods: [&quot;GET&quot;, &quot;POST&quot;] },<br>});<br><br>io.on(&quot;connection&quot;, (socket) =&gt; {<br>  console.log(`a user connected ${socket.id}`);<br>  <br>  socket.on(&quot;send_message&quot;, (data) =&gt; {<br>    socket.broadcast.emit(&quot;receive_message&quot;, data);<br>  });<br>});<br>server.listen(4000, () =&gt; {<br>  console.log(&quot;listening on *:4000&quot;);<br>});</pre><p>Here is the final output.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*f0e54kuZSGu0pvAivmOJug.gif\" /><figcaption>Final output</figcaption></figure><p>This comprehensive guide explores building real-time applications using Socket.io, React.js, Node.js, and Express.js. By leveraging these technologies, developers can create dynamic and interactive applications that provide instant updates to users. The guide covers fundamental concepts, step-by-step implementation, and best practices. For the complete source code , visit the GitHub repository <a href=\"https://github.com/matheshyogeswaran/React_socket_io.git\">https://github.com/matheshyogeswaran/React_socket_io.git</a> . Happy coding!</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=adc86da2f9f1\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://blog.bitsrc.io/building-real-time-applications-with-socket-io-adc86da2f9f1\">Building Real-Time Applications with Socket.io,</a> was originally published in <a href=\"https://blog.bitsrc.io\">Bits and Pieces</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
            "date_published": "2023-06-22T16:55:30.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/a9d0b1afec4",
            "url": "https://medium.com/@matheshyogeswaran/building-a-selenium-4-cucumber-hybrid-framework-with-spring-tool-suite-a-step-by-step-guide-a9d0b1afec4?source=rss-505ef1b70e94------2",
            "title": "Building a Selenium 4 — Cucumber Hybrid Framework with Spring Tool Suite: A Step-by-Step Guide…",
            "content_html": "<h3>Building a Selenium 4 — Cucumber Hybrid Framework with Spring Tool Suite: A Step-by-Step Guide with Screenshots</h3><p>The Selenium 4 — Cucumber Hybrid Framework combines Selenium WebDriver and Cucumber to create a powerful automated testing solution. It allows you to write tests in a human-readable format (Gherkin) and execute them using Selenium WebDriver. This framework enhances the collaboration, readability, and maintainability of automated tests for web applications.</p><p>Step 1: Create a Maven Project</p><ul><li>Open the Spring Tool Suite.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/620/1*JCLbZcD4LvYh5yp2Uqgh7w.png\" /></figure><ul><li>Click on “Create Project”.</li><li>Select “Maven” and then “Maven Project”.</li><li>Click “Next”.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/547/1*L6AZtEkxDkulQ0YKuJGzcA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_7mw5bEQLIc7wjf0SUeHKQ.png\" /></figure><ul><li>Choose “maven-archetype-quickstart” in the filter.</li><li>Click “Next”.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*ZAcq-LlBxTFH-SZzgaQgPQ.png\" /></figure><ul><li>Enter a Group Id and Artifact Id for your project.</li><li>Click “Finish”.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/961/1*E3LsbVpTK80tTG5UlCe1Nw.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2x_HKO8Ovtrv0-1hQyQEmw.png\" /></figure><p>then type “Y” and enter,</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0D7qV_d6sr0Etav43et7tg.png\" /></figure><p>Delete the packages “com.example” and “com.example.App” under src/test/java.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/305/1*buYMtBZZ_vydEjQrWqK26g.png\" /></figure><p>Step 2: Create the Feature File</p><ul><li>Right-click on the project.</li><li>Select “New” -&gt; “Source Folder” and name it “src/test/resources”.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fqlPCGHlJLGxtYs_LCIrvA.png\" /></figure><ul><li>Right-click on the “src/test/resources” folder.</li><li>Select “New” -&gt; “Package” and name it “features”.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/507/1*OLnj6KfUSSwxxYyrNWbKMw.png\" /></figure><ul><li>Right-click on the “features” package.</li><li>Select “New” -&gt; “File” and name it “Login.feature”.</li><li>Open the “Login.feature” file.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/513/1*70Az46z1scdWdndmZslCIw.png\" /></figure><ul><li>Add the following content to the file:</li></ul><pre>Feature: Login function<br><br>Scenario: Login with valid credentials<br>Given User has navigated to login page<br>When User enters valid email address &quot;ben1@gmail.com&quot; into email field<br>And User enters valid password &quot;ben123&quot; into password field<br>And User clicks on Login button<br>Then User should get successfully logged in<br></pre><p>Step 3: Create the Step Definitions</p><ul><li>Right-click on the “src/test/java” folder.</li><li>Select “New” -&gt; “Package” and name it “stepdefinitions”.</li><li>Right-click on the “stepdefinitions” package.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/543/1*oQN-WbE8tq4WR8aPnE2kHA.png\" /></figure><ul><li>Select “New” -&gt; “Class” and name it “stepdefinitions”.</li><li>Open the “stepdefinitions” class.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/523/1*01uGqzKDeVk1AarQmqeVdQ.png\" /></figure><ul><li>Add the following content to the file:</li></ul><pre>package stepdefinitions;<br><br>import io.cucumber.java.Before;<br>import io.cucumber.java.en.And;<br>import io.cucumber.java.en.Given;<br>import io.cucumber.java.en.Then;<br>import io.cucumber.java.en.When;<br>import java.time.Duration;<br>import org.junit.Assert;<br>import org.openqa.selenium.By;<br>import org.openqa.selenium.WebDriver;<br>import org.openqa.selenium.chrome.ChromeDriver;<br><br>public class Login {<br> WebDriver driver;<br><br> @Before<br> public void setup() {<br>  driver = new ChromeDriver();<br>  driver.manage().deleteAllCookies();<br>  driver.manage().window().maximize();<br>  driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));<br>  driver.get(&quot;https://tutorialsninja.com/demo/&quot;);<br><br> }<br><br><br> @Given(&quot;^User has navigated to login page$&quot;)<br> public void userHasNavigatedToLoginPage() {<br>  driver.findElement(By.xpath(&quot;//*[@id=\\&quot;top-links\\&quot;]/ul/li[2]/a/span[2]&quot;)).click();<br>  driver.findElement(By.linkText(&quot;Login&quot;)).click();<br><br> }<br><br> @When(&quot;User enters valid email address {string} into email field&quot;)<br>    public void userEntersValidEmailAddress(String email) {<br>       driver.findElement(By.id(&quot;input-email&quot;)).sendKeys(email);<br>    }<br>    <br>    @And(&quot;User enters valid password {string} into password field&quot;)<br>    public void userEntersValidPassword(String password) {<br>       driver.findElement(By.id(&quot;input-password&quot;)).sendKeys(password);<br>    }<br>    <br>    @And(&quot;User clicks on Login button&quot;)<br>    public void userClicksOnLoginButton() {<br>       driver.findElement(By.xpath(&quot;//body/div[@id=&#39;account-login&#39;]/div[1]/div[1]/div[1]/div[2]/div[1]/form[1]/input[1]&quot;)).click();<br>       <br>    }<br>    <br>    @Then(&quot;User should get successfully logged in&quot;)<br>    public void userShouldGetSuccessfullyLoggedIn() {<br>       Assert.assertTrue(driver.findElement(By.linkText(&quot;Edit your account information&quot;)).isDisplayed());<br>    }<br>}</pre><p>Step 4: Configure Maven Dependencies</p><ul><li>Open the pom.xml file of your project.</li><li>Add the following dependencies inside the &lt;dependencies&gt; tag:</li></ul><pre>&lt;!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-junit --&gt;<br>  &lt;dependency&gt;<br>   &lt;groupId&gt;io.cucumber&lt;/groupId&gt;<br>   &lt;artifactId&gt;cucumber-junit&lt;/artifactId&gt;<br>   &lt;version&gt;7.12.1&lt;/version&gt;<br>   &lt;scope&gt;test&lt;/scope&gt;<br>  &lt;/dependency&gt;<br>  &lt;!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-core --&gt;<br>  &lt;dependency&gt;<br>   &lt;groupId&gt;io.cucumber&lt;/groupId&gt;<br>   &lt;artifactId&gt;cucumber-core&lt;/artifactId&gt;<br>   &lt;version&gt;7.12.1&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java --&gt;<br>  &lt;dependency&gt;<br>   &lt;groupId&gt;io.cucumber&lt;/groupId&gt;<br>   &lt;artifactId&gt;cucumber-java&lt;/artifactId&gt;<br>   &lt;version&gt;7.12.1&lt;/version&gt;<br>  &lt;/dependency&gt;<br>https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java --&gt;<br>  &lt;dependency&gt;<br>   &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;<br>   &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;<br>   &lt;version&gt;4.10.0&lt;/version&gt;<br>  &lt;/dependency&gt;</pre><p>Step 5: Create the Runner Class</p><ul><li>Right-click on the “src/test/java” folder.</li><li>Select “New” -&gt; “Package” and name it “runner”.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/514/1*k5uC-DY24qragna9xP7svg.png\" /></figure><ul><li>Right-click on the “runner” package.</li><li>Select “New” -&gt; “Class” and name it “TestRunner”.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/534/1*uOiXHK-BSrtjxCVPGA9kvw.png\" /></figure><ul><li>Open the “TestRunner” class.</li><li>Add the following content to the file:</li></ul><pre>package runner;<br><br>import org.junit.runner.RunWith;<br>import io.cucumber.junit.Cucumber;<br>import io.cucumber.junit.CucumberOptions;<br><br>@RunWith(Cucumber.class)<br>@CucumberOptions(<br>     features = &quot;src/test/resources/features&quot;,<br>     glue = {&quot;stepdefinitions&quot; }<br>    <br>  <br> )<br>public class MyRunner {<br><br>}</pre><p>Step 6: Run the Tests</p><ul><li>Right-click on the “TestRunner” class.</li><li>Select “Run As” -&gt; “JUnit Test”.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QQipffgkJ8VkM1kNY23nZA.png\" /></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TQS2a7yRzb5J-h7a5WXVMQ.png\" /></figure><p>That’s it! You have created a Selenium 4 — Cucumber Hybrid Framework from scratch in Spring Tool Suite. Now you can run your tests using the runner class.</p><p>GitHub Repository: <a href=\"https://github.com/matheshyogeswaran/Cucumber_Selenium.git\">Selenium 4 — Cucumber Hybrid Framework</a></p><p>The repository contains the complete code implementation for the framework, including the feature files, step definitions, Maven configuration, and the runner class. You can clone or download the repository to access the code and use it as a reference or starting point for your own Selenium and Cucumber projects.</p><p>Feel free to explore the repository and utilize the code for building your Selenium 4 — Cucumber Hybrid Framework.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a9d0b1afec4\" width=\"1\" height=\"1\" alt=\"\">",
            "date_published": "2023-06-15T14:13:14.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/243cd45f063b",
            "url": "https://blog.bitsrc.io/effortlessly-fetch-and-store-jira-issues-in-mongodb-using-node-js-and-express-243cd45f063b?source=rss-505ef1b70e94------2",
            "title": "Effortlessly Fetch and Store Jira Issues in MongoDB Using Node.js and Express",
            "content_html": "<p>Here we are going to fetch Jira issues and save them into the MongoDB using Nodejs and Express. Here we start with the process of setting up the node js</p><p>Step 1: Set up a Jira API token In order to access the Jira API, you’ll need to generate an API token. Here’s how to do it:</p><ul><li>Log in to your Jira account</li><li>Click on your profile picture and select “Account settings”</li><li>Click on “Security” in the left-hand menu</li><li>Click on “Create and manage API tokens”</li><li>Click on “Create API token” and follow the prompts to generate a token</li></ul><p>Step 2: Set up a new Node.js project Create a new directory for your project, navigate to it in the terminal, and run the following command:</p><pre>npm init</pre><p>Follow the prompts to set up your project and create a package.json file.</p><p>Step 3: Install the necessary dependencies Install the following dependencies by running these commands:</p><pre>npm install express axios mongoose</pre><p>These packages are used for creating an HTTP server, making HTTP requests, and interacting with MongoDB, respectively.</p><p>Step 4: Create a Jira issue schema Create a new file called issueSchema.js and define a Mongoose schema for Jira issues. Here&#39;s an example schema:</p><pre>const mongoose = require(&quot;mongoose&quot;);<br><br>const issueSchema = new mongoose.Schema({<br>  id: { type: String, required: true },<br>  summary: { type: String, required: true },<br>  description: { type: String, required: false },<br>  projectName: { type: String, required: true },<br>  createdBy: { type: String, required: true },<br>  createdTime: { type: Date, required: true },<br>});<br><br>module.exports = mongoose.model(&quot;Issue&quot;, issueSchema);</pre><p>This schema defines the structure of a Jira issue and sets some fields to be required.</p><p>Step 5: Set up a connection to MongoDB Create a new file called index.js and set up a connection to your MongoDB instance. Here&#39;s an example:</p><pre>const express = require(&quot;express&quot;);<br>const app = express();<br>const mongoose = require(&quot;mongoose&quot;);<br>const PORT = 8000;<br>const Issue = require(&quot;./issueSchema&quot;);<br><br>mongoose<br>  .connect(&quot;mongodb://localhost:27017/jira&quot;, {<br>    useUnifiedTopology: true,<br>    useNewUrlParser: true,<br>    autoIndex: true,<br>  })<br>  .then(() =&gt; {<br>    console.log(&quot;Database connected!&quot;);<br>    app.listen(PORT, () =&gt; {<br>      console.log(`Server listening on PORT ${PORT}`);<br>    });<br>  })<br>  .catch((err) =&gt; console.log(err));</pre><p>This code sets up a connection to a local MongoDB instance running on port 27017 and starts an HTTP server listening on port 8000.</p><p>Step 6: Fetch issues from Jira Create a new route in index.js that fetches issues from Jira and saves them to MongoDB. Here&#39;s an example:</p><pre>app.get(&quot;/issues&quot;, async (req, res) =&gt; {<br>  try {<br>    // Fetch issues from Jira<br>    const jiraDomain = &quot;dreamshack.atlassian.net&quot;;<br>    const username = &quot;dreamshack1999@gmail.com&quot;;<br>    const apiToken =<br>      &quot;YOUR_API_TOKEN&quot;;<br>    const url = `https://${jiraDomain}/rest/api/2/search?jql=`;<br>    const auth = {<br>      username: username,<br>      password: apiToken,<br>    };<br>    const response = await axios.get(url, { auth: auth });<br>    const issues = response.data.issues;<br><br>    // Save new issues to MongoDB<br>    let newIssuesSaved = 0;<br>    for (const issue of issues) {<br>      const issueId = issue.id;<br>      const existingIssue = await Issue.findOne({ id: issueId });<br>      if (!existingIssue) {<br>        const issueData = {<br>          id: issueId,<br>          summary: issue.fields.summary,<br>          description: issue.fields.description,<br>          projectName: issue.fields.project.name,<br>          createdBy: issue.fields.creator.displayName,<br>          createdTime: issue.fields.created,<br>        };<br>        const dbIssue = new Issue(issueData);<br>        await dbIssue.save();<br>        newIssuesSaved++;<br>      }<br>    }<br><br>    res.send(`Saved ${newIssuesSaved} new issues to MongoDB`);<br>  } catch (error) {<br>    console.log(error);<br>    res.status(500).send(&quot;Error fetching and saving issues&quot;);<br>  }<br>});</pre><p>here we will look deeply in the code</p><pre>app.get(&quot;/issues&quot;, async (req, res) =&gt; {</pre><p>This creates a new route for the /issues endpoint using the HTTP GET method. When this route is accessed, the code inside the function will be executed.</p><pre>// Fetch issues from Jira<br>const jiraDomain = &quot;dreamshack.atlassian.net&quot;;<br>const username = &quot;dreamshack1999@gmail.com&quot;;<br>const apiToken = &quot;ATATT3x...&quot;;<br>const url = `https://${jiraDomain}/rest/api/2/search?jql=`;<br>const auth = { username: username, password: apiToken };<br>const response = await axios.get(url, { auth: auth });<br>const issues = response.data.issues;</pre><p>This section of code fetches issues from Jira using the Jira REST API. The jiraDomain variable is set to the domain of the Jira instance, username is set to the email address of the Jira user, and apiToken is set to the API token for the user. The url variable is constructed using the Jira domain and the JQL query to fetch issues. The auth variable is an object containing the Jira username and API token. The axios.get function is used to make an HTTP GET request to the Jira API using the constructed URL and the auth object for authentication. The await keyword is used to wait for the response from the API. The issues variable is set to the issues property of the response data object.</p><pre>// Save new issues to MongoDB<br>let newIssuesSaved = 0;<br>for (const issue of issues) {<br>  const issueId = issue.id;<br>  const existingIssue = await Issue.findOne({ id: issueId });<br>  if (!existingIssue) {<br>    const issueData = {<br>      id: issueId,<br>      summary: issue.fields.summary,<br>      description: issue.fields.description,<br>      projectName: issue.fields.project.name,<br>      createdBy: issue.fields.creator.displayName,<br>      createdTime: issue.fields.created,<br>    };<br>    const dbIssue = new Issue(issueData);<br>    await dbIssue.save();<br>    newIssuesSaved++;<br>  }<br>}</pre><p>This section of code saves new issues to MongoDB. The newIssuesSaved variable is initialized to 0. A for...of loop is used to iterate over the issues array fetched from Jira. Inside the loop, the id property of the issue is extracted and stored in the issueId variable. An existingIssue variable is created by using the Issue.findOne() method to check if an issue with the same ID already exists in the database. If there is no existing issue, a new issueData object is created with properties extracted from the Jira issue object. A new Issue instance is created using the issueData object. The await keyword is used to wait for the issue to be saved to the database using the save() method of the dbIssue object. The newIssuesSaved variable is incremented if a new issue was saved.</p><pre>res.send(`Saved ${newIssuesSaved} new issues to MongoDB`);</pre><p>This sends a response to the client indicating the number of new issues that were saved to the database.</p><p>Step 7: To check if the data is saved or not, you can open a web browser and type in “localhost:8000/issues”. This will send a GET request to the server, which will trigger the code we have written in our route handler. The code will then fetch issues from Jira and save any new issues to MongoDB. Finally, the server will send a response to the browser indicating how many new issues were saved to the database.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/435/1*MguA95OxWv8TBu5bZWsmuA.png\" /></figure><p>In conclusion, Jira is a powerful project management tool that can help teams organize and track their work effectively. With its extensive range of features, such as issue tracking, customizable workflows, and integration capabilities, Jira can streamline the development process and improve team collaboration. Furthermore, Jira’s open API allows for easy customization and integration with other tools, making it even more flexible and adaptable to different teams needs.</p><p>You can find the source code for this tutorial on GitHub at <a href=\"https://github.com/matheshyogeswaran/jira-issues.git\">https://github.com/matheshyogeswaran/jira-issues.git.</a> This project can serve as a useful reference and starting point for anyone looking to integrate Jira into their workflow.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=243cd45f063b\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://blog.bitsrc.io/effortlessly-fetch-and-store-jira-issues-in-mongodb-using-node-js-and-express-243cd45f063b\">Effortlessly Fetch and Store Jira Issues in MongoDB Using Node.js and Express</a> was originally published in <a href=\"https://blog.bitsrc.io\">Bits and Pieces</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
            "date_published": "2023-05-30T14:44:48.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        },
        {
            "guid": "https://medium.com/p/e62d9094e22",
            "url": "https://blog.bitsrc.io/firebase-authentication-with-react-for-beginners-implementing-email-password-and-google-sign-in-e62d9094e22?source=rss-505ef1b70e94------2",
            "title": "Firebase Auth with React: Implement Email/Password and Google Sign-in",
            "content_html": "<p>Firebase Authentication is a powerful tool for managing user authentication in web and mobile applications. With Firebase, developers can easily integrate authentication methods into their applications without having to build complex authentication systems from scratch.</p><p>In this write-up, we will explore how to implement Firebase Authentication in a React application, specifically focusing on the Email/Password and Google Sign-in methods. We will walk through the steps required to set up Firebase in a React application and then demonstrate how to implement these two authentication methods.</p><p>This writeup is aimed at beginners who are new to Firebase and React and are looking for a step-by-step guide on how to implement authentication in their React applications using Firebase. By the end of this write-up, you should have a good understanding of how to integrate Firebase Authentication into your React application and be able to implement email/password and Google Sign-in methods for your users.</p><p>For the first step, create a basic React app. Now we see how to create the Firebase project in step-by-step</p><h3>1. Go to console.firebase.google.com</h3><h3>2. Click on Create a project</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9VzyJGDyhkf6Qndt\" /></figure><h3>3. Type “firebase-react-auth”</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*L0dwrO570xiDoXQu\" /></figure><h3>4. Click on Continue</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*5ngHgftXVTgBgpiJ\" /></figure><h3>5. Check I accept the Google Analytics terms</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*hccPQczPbidALpR9\" /></figure><h3>6. Click on Create project</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*U17MiCtWwna_Iq6J\" /></figure><h3>7. Click on Continue</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FS3Af75xkI4DWDwx\" /></figure><p>Now we have created the project in Firebase. Now we create the web app on that project here the step by step for that</p><h3>1. Click on Create a Web app</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RfIigL1h3iYinavy\" /></figure><h3>2. Type “firebase-react-app”</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*L4x_BLQZX6v-NI7S\" /></figure><h3>3. Check Also set up Firebase Hosting for this app.</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YDpIzG-cBy1qbkXa\" /></figure><h3>4. Click on Register app</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*AaYCXEvbE7U7qW0-\" /></figure><h3>5. Here Install Firebase in React using</h3><pre>npm install firebase</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*fDkrNYOUNxtDXhny\" /></figure><h3>6. Copy the code and paste it in firebase.js</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/284/1*n0M-V6BEDZ9cW3l8HGSbEA.png\" /><figcaption>File structure</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*LCxunvzBLOPr2vyM\" /></figure><h3>7. Click on Next</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6KZsvwkKQTpuODPL\" /></figure><h3>8. Here Install Firebase tools in React using</h3><pre>npm install -g firebase-tools</pre><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*MaRKuKfbka9vg92U\" /></figure><h3>9.Click on Next</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*X6H8KzmXF-1Chuyy\" /></figure><h3>10.Click on Continue to console</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*CyRBeqjLWkHWmR2I\" /></figure><p>Here, we have set up the web app with React. Now, we can move on to implementing sign-in functionality using email, password, and Google authentication methods.​</p><h3>1. Click on authentication</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*SdgDCHBp9p0keqx3\" /></figure><h3>2. Click on Get started</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*NP_0h3lp_UF2DypG\" /></figure><h3>3. Click on Email/Password</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*JlXp2h-cXL2PyKmP\" /></figure><h3>4. Check Enable</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DZ95yizNJnEB90Ii\" /></figure><h3>5. Click on Save</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ffVDbk9BCA0CzkUA\" /></figure><h3>6. Click on Add new provider</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*IwPhkUh97WfbVlCq\" /></figure><h3>7. Click on Google</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ektPIQ5ijv2oa_w4\" /></figure><h3>8. Check Enable</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*wiMzWHf6nC5zD0Y7\" /></figure><h3>9. Click on your mail address</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*DVsPuvny98oFlAWp\" /></figure><h3>10. Click on Save</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6MTNEFmLkTggu8rn\" /></figure><p>Here, we have completed the Firebase setup. Now, we can move on to working with React. Specifically, in the auth.js file, we can implement the authentication functionality for our React app.</p><pre><br>import { auth , googleProvider} from &quot;../config/firebase&quot;;<br>import { createUserWithEmailAndPassword,signInWithPopup, signOut } from &quot;firebase/auth&quot;;<br>import { useState } from &quot;react&quot;;<br><br>export const Auth = () =&gt; {<br>  const [email, setEmail] = useState(&quot;&quot;);<br>  const [password, setPassword] = useState(&quot;&quot;);<br>    console.log(auth?.currentUser?.email);<br>  const signIn = async () =&gt; {<br>    try {<br>    await createUserWithEmailAndPassword(auth, email, password);<br>    } catch (err){<br>      console.error(err);<br>    }<br>  };<br>  const signInWithGoogle = async () =&gt; {<br>    try {<br>    await signInWithPopup(auth,googleProvider);<br>    } catch (err){<br>      console.error(err);<br>    }<br>  };<br>  const logOut = async () =&gt; {<br>    try {<br>    await signOut(auth);<br>    } catch (err){<br>      console.error(err);<br>    }<br>  };<br>  return (<br>    &lt;div&gt;<br>      &lt;input placeholder=&quot;Email..&quot; onChange={(e) =&gt; setEmail(e.target.value)} /&gt;<br>      &lt;input<br>        type=&quot;password&quot;<br>        placeholder=&quot;Password..&quot;<br>        onChange={(e) =&gt; setPassword(e.target.value)}<br>      /&gt;<br>      &lt;button onClick={signIn}&gt; Signin&lt;/button&gt;<br>      &lt;button onClick={signInWithGoogle}&gt; Signin with google&lt;/button&gt;<br>      &lt;button onClick={logOut}&gt; logOut&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>};</pre><p>The component renders an input field for the email and password, and three buttons: “Signin”, “Signin with google”, and “logOut”. The useState hook is used to manage the state of the email and password input fields.</p><p>The signIn function is called when the &quot;Signin&quot; button is clicked. It calls createUserWithEmailAndPassword with the email and password state values, and logs any errors to the console.</p><p>The signInWithGoogle function is called when the &quot;Signin with google&quot; button is clicked. It calls signInWithPopup with the googleProvider and logs any errors to the console.</p><p>The logOut function is called when the &quot;logOut&quot; button is clicked. It calls signOut and logs any errors to the console.</p><p>In the firebase.js file, we initialize the Firebase app using the configuration details specified in the firebaseConfig object. We also create and export instances of the auth and googleProvider objects. These instances are used in the auth.js file to implement the authentication methods for our React app.</p><pre><br>import { initializeApp } from &quot;firebase/app&quot;;<br>import {getAuth, GoogleAuthProvider} from &#39;firebase/auth&#39;<br><br>const firebaseConfig = {<br> Yours details<br>};<br><br>// Initialize Firebase<br>const app = initializeApp(firebaseConfig);<br>export const auth =  getAuth(app);<br>export const googleProvider = new GoogleAuthProvider();</pre><p>In conclusion, Firebase Authentication is a powerful tool that can simplify the process of implementing user authentication in your React applications. By following the steps outlined in this write-up, you should now have a good understanding of how to implement email/password and Google Sign-in authentication methods using Firebase in a React application. With this knowledge, you can build more secure and user-friendly applications that can help improve the user experience.</p><p>You can find the source code for this tutorial on GitHub at <a href=\"https://github.com/matheshyogeswaran/firebase-react-auth.git\">https://github.com/matheshyogeswaran/firebase-react-auth.git</a>. This code can serve as a reference as you work on implementing Firebase Authentication in your own React applications. With the knowledge gained from this tutorial, you should be able to confidently integrate email/password and Google Sign-in authentication methods into your React applications using Firebase.</p><h3>Build React Apps with reusable components, just like Lego</h3><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/0*JJGzKfMKIRj2Boo9.png\" /></figure><p><a href=\"https://bit.cloud/\"><strong>Bit</strong></a><strong>’s open-source tool </strong>help 250,000+ devs to build apps with components.</p><p>Turn any UI, feature, or page into a <strong>reusable component</strong> — and share it across your applications. It’s easier to collaborate and build faster.</p><p><strong>→ </strong><a href=\"https://bit.dev/\"><strong>Learn more</strong></a></p><p>Split apps into components to make app development easier, and enjoy the best experience for the workflows you want:</p><h3>→ <a href=\"https://blog.bitsrc.io/how-we-build-micro-front-ends-d3eeeac0acfc\">Micro-Frontends</a></h3><h3>→ <a href=\"https://blog.bitsrc.io/how-we-build-our-design-system-15713a1f1833\">Design System</a></h3><h3>→ <a href=\"https://bit.cloud/blog/how-to-reuse-react-components-across-your-projects-l4pz83f4\">Code-Sharing and reuse</a></h3><h3>→ <a href=\"https://www.youtube.com/watch?v=5wxyDLXRho4&amp;t=2041s\">Monorepo</a></h3><h3>Learn more:</h3><ul><li><a href=\"https://blog.bitsrc.io/creating-a-developer-website-with-bit-components-3f4083a7f050\">Creating a Developer Website with Bit components</a></li><li><a href=\"https://blog.bitsrc.io/how-we-build-micro-front-ends-d3eeeac0acfc\">How We Build Micro Frontends</a></li><li><a href=\"https://blog.bitsrc.io/how-we-build-our-design-system-15713a1f1833\">How we Build a Component Design System</a></li><li><a href=\"https://bit.dev/blog/how-to-reuse-react-components-across-your-projects-l4pz83f4/\">How to reuse React components across your projects</a></li><li><a href=\"https://blog.bitsrc.io/5-ways-to-build-a-react-monorepo-a294b6c5b0ac\">5 Ways to Build a React Monorepo</a></li><li><a href=\"https://bit.dev/blog/how-to-create-a-composable-react-app-with-bit-l7ejpfhc/\">How to Create a Composable React App with Bit</a></li><li><a href=\"https://itnext.io/how-to-reuse-and-share-react-components-in-2023-a-step-by-step-guide-85642e543afa\">How to Reuse and Share React Components in 2023: A Step-by-Step Guide</a></li></ul><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e62d9094e22\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://blog.bitsrc.io/firebase-authentication-with-react-for-beginners-implementing-email-password-and-google-sign-in-e62d9094e22\">Firebase Auth with React: Implement Email/Password and Google Sign-in</a> was originally published in <a href=\"https://blog.bitsrc.io\">Bits and Pieces</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
            "date_published": "2023-04-27T13:19:45.000Z",
            "author": {
                "name": "Matheshyogeswaran"
            }
        }
    ]
}